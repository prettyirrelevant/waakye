package deezer

import (
	"fmt"

	"github.com/imroc/req/v3"
)

type Deezer struct {
	RequestClient *req.Client
	Config        Config
}

type InitialisationOpts struct {
	RequestClient     *req.Client
	AppID             string
	BaseAPIURL        string
	ClientSecret      string
	AuthenticationURL string
}

type Config struct {
	BaseAPIURL        string
	AppID             string
	ClientSecret      string
	AuthenticationURL string
}

// API Types (Autogenerated).
type deezerAPIGetPlaylistResponse struct {
	ID          int    `json:"id"`
	Title       string `json:"title"`
	Description string `json:"description"`
	Creator     struct {
		ID        int    `json:"id"`
		Name      string `json:"name"`
		Tracklist string `json:"tracklist"`
		Type      string `json:"type"`
	} `json:"creator"`
	Type   string `json:"type"`
	Tracks struct {
		Data []struct {
			ID     int    `json:"id"`
			Title  string `json:"title"`
			Artist struct {
				ID   int    `json:"id"`
				Name string `json:"name"`
			} `json:"artist"`
		} `json:"data"`
	} `json:"tracks"`
}

type deezerAPISearchTrackResponse struct {
	Data []struct {
		ID           int    `json:"id"`
		Title        string `json:"title"`
		TitleShort   string `json:"title_short"`
		TitleVersion string `json:"title_version"`
		Duration     int    `json:"duration"`
		Rank         int    `json:"rank"`
		Artist       struct {
			ID   int    `json:"id"`
			Name string `json:"name"`
		} `json:"artist"`
		Type string `json:"type"`
	} `json:"data"`
	Total int `json:"total"`
}

type deezerAPICreatePlaylistResponse struct {
	ID string `json:"id"`
}

type deezerAPIBearerCredentialsResponse struct {
	AccessToken string `json:"access_token"`
	Expires     int64  `json:"expires"`
}

type deezerAPIError struct {
	APIError struct {
		Type    string `json:"type"`
		Message string `json:"message"`
		Code    int    `json:"code"`
	} `json:"error"`
}

func (e *deezerAPIError) Error() string {
	return fmt.Sprintf("Deezer API Error: code %v type: %s  reason: %s", e.APIError.Code, e.APIError.Type, e.APIError.Message)
}
